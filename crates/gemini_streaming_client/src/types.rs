use serde::{
    Deserialize,
    Serialize,
};

/// Represents a request to the Gemini API.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct GeminiRequest {
    /// The contents of the request.
    pub contents: Vec<GeminiContent>,

    /// Optional tools that the model can use.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub tools: Option<Vec<GeminiTool>>,

    /// Optional generation configuration.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub generation_config: Option<GeminiGenerationConfig>,
}

/// Represents the content of a message in a Gemini request or response.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct GeminiContent {
    /// The role of the content creator (e.g., "user", "model").
    #[serde(skip_serializing_if = "Option::is_none")]
    pub role: Option<String>,

    /// The parts that make up the content.
    pub parts: Vec<GeminiPart>,
}

/// Represents a part of content in a Gemini message.
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum GeminiPart {
    /// A text part.
    Text { text: String },

    /// A function call part.
    FunctionCall {
        #[serde(rename = "functionCall")]
        function_call: GeminiFunctionCall,
    },

    /// A function response part.
    FunctionResponse {
        #[serde(rename = "functionResponse")]
        function_response: GeminiFunctionResponse,
    },
}

/// Represents a function call in a Gemini message.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct GeminiFunctionCall {
    /// The name of the function to call.
    pub name: String,

    /// The arguments to pass to the function.
    pub args: serde_json::Value,
}

/// Represents a function response in a Gemini message.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct GeminiFunctionResponse {
    /// The name of the function that was called.
    pub name: String,

    /// The response from the function.
    pub response: serde_json::Value,
}

/// Represents a tool that the model can use.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct GeminiTool {
    /// The function declarations for the tool.
    pub function_declarations: Vec<GeminiFunctionDeclaration>,
}

/// Represents a function declaration for a tool.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct GeminiFunctionDeclaration {
    /// The name of the function.
    pub name: String,

    /// A description of what the function does.
    pub description: String,

    /// The parameters that the function accepts.
    pub parameters: serde_json::Value,
}

/// Represents the configuration for generating content.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct GeminiGenerationConfig {
    /// The temperature parameter for controlling randomness (0.0 to 1.0).
    #[serde(skip_serializing_if = "Option::is_none")]
    pub temperature: Option<f32>,

    /// The maximum number of tokens to generate.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub max_output_tokens: Option<i32>,

    /// The top-k parameter for sampling.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub top_k: Option<i32>,

    /// The top-p parameter for sampling.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub top_p: Option<f32>,
}

/// Represents a response from the Gemini API.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct GeminiResponse {
    /// The candidates generated by the model.
    pub candidates: Vec<GeminiCandidate>,

    /// Optional usage metrics.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub usage_metadata: Option<GeminiUsageMetadata>,
}

/// Represents a candidate response from the Gemini model.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct GeminiCandidate {
    /// The content of the candidate.
    pub content: GeminiContent,

    /// Optional finish reason.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub finish_reason: Option<String>,

    /// Optional safety ratings.
    #[serde(skip_serializing_if = "Option::is_none")]
    pub safety_ratings: Option<Vec<GeminiSafetyRating>>,
}

/// Represents usage metadata in a Gemini response.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct GeminiUsageMetadata {
    /// The number of prompt tokens.
    pub prompt_token_count: i32,

    /// The number of candidates generated.
    pub candidates_token_count: i32,

    /// The total number of tokens.
    pub total_token_count: i32,
}

/// Represents a safety rating in a Gemini response.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct GeminiSafetyRating {
    /// The category of the safety rating.
    pub category: String,

    /// The probability of the content being harmful.
    pub probability: String,
}

/// Represents a streaming response from the Gemini API.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct GeminiStreamingResponse {
    /// The candidates generated by the model.
    pub candidates: Vec<GeminiCandidate>,
}
